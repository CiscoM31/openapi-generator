{{>partial_header}}
package {{packageName}}

import (
	"crypto"
	"crypto/x509"
	"encoding/pem"
	"io/ioutil"
	"net/http"
	"os"
)

// contextKeys are used to identify the type of value in the context.
// Since these are string, it is possible to get a short description of the
// context key for logging and debugging using key.String().

type contextKey string

func (c contextKey) String() string {
	return "auth " + string(c)
}

var (
	// ContextOAuth2 takes an oauth2.TokenSource as authentication for the request.
	ContextOAuth2 = contextKey("token")

	// ContextBasicAuth takes BasicAuth as authentication for the request.
	ContextBasicAuth = contextKey("basic")

	// ContextAccessToken takes a string oauth2 access token as authentication for the request.
	ContextAccessToken = contextKey("accesstoken")

	// ContextAPIKeys takes a string apikey as authentication for the request
	ContextAPIKeys = contextKey("apiKeys")

	// ContextHttpSignatureAuth takes HttpSignatureAuth as authentication for the request.
	ContextHttpSignatureAuth = contextKey("httpsignature")
)

// BasicAuth provides basic http authentication to a request passed via context using ContextBasicAuth
type BasicAuth struct {
	UserName string `json:"userName,omitempty"`
	Password string `json:"password,omitempty"`
}

// APIKey provides API key based authentication to a request passed via context using ContextAPIKey
type APIKey struct {
	Key    string
	Prefix string
}

// HttpSignatureAuth provides http message signature authentication to a request passed via context using ContextHttpSignatureAuth
type HttpSignatureAuth struct {
	KeyId         string            // A key identifier.
	PrivateKey    crypto.PrivateKey // The private key used to sign HTTP requests.
	Algorithm     string            // The signature algorithm. Supported values are rsa-sha256, rsa-sha512, hs2019.
	SignedHeaders []string          // A list of HTTP headers included when generating the signature for the message.
}

// LoadPrivateKey reads the private key from the specified file.
func (h *HttpSignatureAuth) LoadPrivateKey(filename string) (err error) {
	var file *os.File
	file, err = os.Open(filename)
	if err != nil {
		return err
	}
	defer func() {
		err = file.Close()
	}()
	var priv []byte
	priv, err = ioutil.ReadAll(file)
	if err != nil {
		return err
	}
	privPem, _ := pem.Decode(priv)
	switch privPem.Type {
	case "RSA PRIVATE KEY":
		if h.PrivateKey, err = x509.ParsePKCS1PrivateKey(privPem.Bytes); err != nil {
			return err
		}
	case "ECDSA PRIVATE KEY":
		if h.PrivateKey, err = x509.ParsePKCS8PrivateKey(block.Bytes); err != nil {
			return err
		}
	default:
		return fmt.Errorf("Key '%s' is not supported", privPem.Type)
	}
	return nil
}

// Configuration stores the configuration of the API client
type Configuration struct {
	BasePath      string            `json:"basePath,omitempty"`
	Host          string            `json:"host,omitempty"`
	Scheme        string            `json:"scheme,omitempty"`
	DefaultHeader map[string]string `json:"defaultHeader,omitempty"`
	UserAgent     string            `json:"userAgent,omitempty"`
	HTTPClient    *http.Client
}

// NewConfiguration returns a new Configuration object
func NewConfiguration() *Configuration {
	cfg := &Configuration{
		BasePath:      "{{{basePath}}}",
		DefaultHeader: make(map[string]string),
		UserAgent:     "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}OpenAPI-Generator/{{{packageVersion}}}/go{{/httpUserAgent}}",
	}
	return cfg
}

// AddDefaultHeader adds a new HTTP header to the default header in the request
func (c *Configuration) AddDefaultHeader(key string, value string) {
	c.DefaultHeader[key] = value
}
