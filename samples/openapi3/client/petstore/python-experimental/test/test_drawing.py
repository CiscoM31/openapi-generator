# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import petstore_api


class TestDrawing(unittest.TestCase):
    """Drawing unit test stubs"""

    def setUp(self):
        self.api_client = petstore_api.ApiClient()

    def tearDown(self):
        pass

    def test_deserialize_oneof_reference(self):
        isosceles_triangle = petstore_api.Shape(
            shape_type="Triangle",
            triangle_type="IsoscelesTriangle"
        )
        assert isinstance(isosceles_triangle, petstore_api.IsoscelesTriangle)
        inst = petstore_api.Drawing(
            # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]
            # composed schema. So we should be able to assign a petstore_api.Triangle
            # to a 'main_shape'.
            main_shape=isosceles_triangle,
            shapes=[
                petstore_api.Shape(
                    shape_type="Triangle",
                    triangle_type="EquilateralTriangle"
                ),
                petstore_api.Triangle(
                    shape_type="Triangle",
                    triangle_type="IsoscelesTriangle"
                ),
                petstore_api.EquilateralTriangle(
                    shape_type="Triangle",
                    triangle_type="EquilateralTriangle"
                ),
                petstore_api.Shape(
                    shape_type="Quadrilateral",
                    quadrilateral_type="ComplexQuadrilateral"
                ),
            ],
        )
        assert isinstance(inst, petstore_api.Drawing)
        assert isinstance(inst.main_shape, petstore_api.IsoscelesTriangle)
        self.assertEqual(len(inst.shapes), 4)
        assert isinstance(inst.shapes[0], petstore_api.EquilateralTriangle)
        assert isinstance(inst.shapes[1], petstore_api.IsoscelesTriangle)
        assert isinstance(inst.shapes[2], petstore_api.EquilateralTriangle)
        assert isinstance(inst.shapes[3], petstore_api.ComplexQuadrilateral)

        # Validate we cannot assign the None value to main_shape because the 'null' type
        # is not one of the allowed types in the 'Shape' schema.
        err_msg = ("Invalid type for variable '{}'. "
            "Required value type is {} and passed type was {} at {}")
        with self.assertRaisesRegexp(
            petstore_api.ApiTypeError,
            err_msg.format("main_shape", "Shape", "NoneType", "\['main_shape'\]")
        ):
            inst = petstore_api.Drawing(
                # 'main_shape' has type 'Shape', which is a oneOf [triangle, quadrilateral]
                # So the None value should not be allowed and an exception should be raised.
                main_shape=None,
            )

        # Validate we can assign the None value to secondary_shape, because the 'null' type
        # is one of the allowed types in the 'ShapeOrNull' schema.
        inst = petstore_api.Drawing(
            # 'secondary_shape' has type 'Shape', which is a oneOf [null, triangle, quadrilateral]
            secondary_shape=None,
        )
        assert isinstance(inst, petstore_api.Drawing)
        self.assertFalse(hasattr(inst, 'main_shape'))
        self.assertIsNone(inst.secondary_shape)


if __name__ == '__main__':
    unittest.main()
