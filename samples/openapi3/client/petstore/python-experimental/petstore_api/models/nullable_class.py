# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint  # noqa: F401
import re  # noqa: F401

import six  # noqa: F401

from petstore_api.exceptions import (  # noqa: F401
    ApiKeyError,
    ApiTypeError,
    ApiValueError,
)
from petstore_api.model_utils import (  # noqa: F401
    ModelNormal,
    ModelSimple,
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    get_simple_class,
    int,
    model_to_dict,
    none_type,
    str,
    type_error_message,
    validate_and_convert_types
)


class NullableClass(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      openapi_types (dict): The key is attribute name
          and the value is attribute type.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    attribute_map = {
        'integer_prop': 'integer_prop',  # noqa: E501
        'number_prop': 'number_prop',  # noqa: E501
        'boolean_prop': 'boolean_prop',  # noqa: E501
        'string_prop': 'string_prop',  # noqa: E501
        'date_prop': 'date_prop',  # noqa: E501
        'datetime_prop': 'datetime_prop',  # noqa: E501
        'array_nullable_prop': 'array_nullable_prop',  # noqa: E501
        'array_and_items_nullable_prop': 'array_and_items_nullable_prop',  # noqa: E501
        'array_items_nullable': 'array_items_nullable',  # noqa: E501
        'object_nullable_prop': 'object_nullable_prop',  # noqa: E501
        'object_and_items_nullable_prop': 'object_and_items_nullable_prop',  # noqa: E501
        'object_items_nullable': 'object_items_nullable'  # noqa: E501
    }

    openapi_types = {
        'integer_prop': (int, none_type,),  # noqa: E501
        'number_prop': (float, none_type,),  # noqa: E501
        'boolean_prop': (bool, none_type,),  # noqa: E501
        'string_prop': (str, none_type,),  # noqa: E501
        'date_prop': (date, none_type,),  # noqa: E501
        'datetime_prop': (datetime, none_type,),  # noqa: E501
        'array_nullable_prop': ([bool, date, datetime, dict, float, int, list, str], none_type,),  # noqa: E501
        'array_and_items_nullable_prop': ([bool, date, datetime, dict, float, int, list, str, none_type], none_type,),  # noqa: E501
        'array_items_nullable': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
        'object_nullable_prop': ({str: (bool, date, datetime, dict, float, int, list, str,)}, none_type,),  # noqa: E501
        'object_and_items_nullable_prop': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),  # noqa: E501
        'object_items_nullable': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
    }

    validations = {
    }

    additional_properties_type = (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    discriminator = None

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """NullableClass - a model defined in OpenAPI


        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            integer_prop (int, none_type): [optional]  # noqa: E501
            number_prop (float, none_type): [optional]  # noqa: E501
            boolean_prop (bool, none_type): [optional]  # noqa: E501
            string_prop (str, none_type): [optional]  # noqa: E501
            date_prop (date, none_type): [optional]  # noqa: E501
            datetime_prop (datetime, none_type): [optional]  # noqa: E501
            array_nullable_prop ([bool, date, datetime, dict, float, int, list, str], none_type): [optional]  # noqa: E501
            array_and_items_nullable_prop ([bool, date, datetime, dict, float, int, list, str, none_type], none_type): [optional]  # noqa: E501
            array_items_nullable ([bool, date, datetime, dict, float, int, list, str, none_type]): [optional]  # noqa: E501
            object_nullable_prop ({str: (bool, date, datetime, dict, float, int, list, str,)}, none_type): [optional]  # noqa: E501
            object_and_items_nullable_prop ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): [optional]  # noqa: E501
            object_items_nullable ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): [optional]  # noqa: E501
        """
        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            self.__set_item(var_name, var_value)

    def __set_item(self, name, value):
        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)

        if name in self.openapi_types:
            required_types_mixed = self.openapi_types[name]
        elif self.additional_properties_type is None:
            raise ApiKeyError(
                "{0} has no key '{1}'".format(type(self).__name__, name),
                path_to_item
            )
        elif self.additional_properties_type is not None:
            required_types_mixed = self.additional_properties_type

        if get_simple_class(name) != str:
            error_msg = type_error_message(
                var_name=name,
                var_value=name,
                valid_classes=(str,),
                key_type=True
            )
            raise ApiTypeError(
                error_msg,
                path_to_item=path_to_item,
                valid_classes=(str,),
                key_type=True
            )

        if self._check_type:
            value = validate_and_convert_types(
                value, required_types_mixed, path_to_item, self._from_server,
                self._check_type, configuration=self._configuration)
        if (name,) in self.allowed_values:
            check_allowed_values(
                self.allowed_values,
                (name,),
                value
            )
        if (name,) in self.validations:
            check_validations(
                self.validations,
                (name,),
                value
            )
        self._data_store[name] = value

    def __get_item(self, name):
        if name in self._data_store:
            return self._data_store[name]

        path_to_item = []
        if self._path_to_item:
            path_to_item.extend(self._path_to_item)
        path_to_item.append(name)
        raise ApiKeyError(
            "{0} has no key '{1}'".format(type(self).__name__, name),
            [name]
        )

    def __setitem__(self, name, value):
        """this allows us to set values with instance[field_name] = val"""
        self.__set_item(name, value)

    def __getitem__(self, name):
        """this allows us to get a value with val = instance[field_name]"""
        return self.__get_item(name)

    @property
    def integer_prop(self):
        """Gets the integer_prop of this NullableClass.  # noqa: E501

        Returns:
            (int, none_type): The integer_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('integer_prop')

    @integer_prop.setter
    def integer_prop(self, value):
        """Sets the integer_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('integer_prop', value)

    @property
    def number_prop(self):
        """Gets the number_prop of this NullableClass.  # noqa: E501

        Returns:
            (float, none_type): The number_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('number_prop')

    @number_prop.setter
    def number_prop(self, value):
        """Sets the number_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('number_prop', value)

    @property
    def boolean_prop(self):
        """Gets the boolean_prop of this NullableClass.  # noqa: E501

        Returns:
            (bool, none_type): The boolean_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('boolean_prop')

    @boolean_prop.setter
    def boolean_prop(self, value):
        """Sets the boolean_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('boolean_prop', value)

    @property
    def string_prop(self):
        """Gets the string_prop of this NullableClass.  # noqa: E501

        Returns:
            (str, none_type): The string_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('string_prop')

    @string_prop.setter
    def string_prop(self, value):
        """Sets the string_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('string_prop', value)

    @property
    def date_prop(self):
        """Gets the date_prop of this NullableClass.  # noqa: E501

        Returns:
            (date, none_type): The date_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('date_prop')

    @date_prop.setter
    def date_prop(self, value):
        """Sets the date_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('date_prop', value)

    @property
    def datetime_prop(self):
        """Gets the datetime_prop of this NullableClass.  # noqa: E501

        Returns:
            (datetime, none_type): The datetime_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('datetime_prop')

    @datetime_prop.setter
    def datetime_prop(self, value):
        """Sets the datetime_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('datetime_prop', value)

    @property
    def array_nullable_prop(self):
        """Gets the array_nullable_prop of this NullableClass.  # noqa: E501

        Returns:
            ([bool, date, datetime, dict, float, int, list, str], none_type): The array_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('array_nullable_prop')

    @array_nullable_prop.setter
    def array_nullable_prop(self, value):
        """Sets the array_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('array_nullable_prop', value)

    @property
    def array_and_items_nullable_prop(self):
        """Gets the array_and_items_nullable_prop of this NullableClass.  # noqa: E501

        Returns:
            ([bool, date, datetime, dict, float, int, list, str, none_type], none_type): The array_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('array_and_items_nullable_prop')

    @array_and_items_nullable_prop.setter
    def array_and_items_nullable_prop(self, value):
        """Sets the array_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('array_and_items_nullable_prop', value)

    @property
    def array_items_nullable(self):
        """Gets the array_items_nullable of this NullableClass.  # noqa: E501

        Returns:
            ([bool, date, datetime, dict, float, int, list, str, none_type]): The array_items_nullable of this NullableClass.  # noqa: E501
        """
        return self.__get_item('array_items_nullable')

    @array_items_nullable.setter
    def array_items_nullable(self, value):
        """Sets the array_items_nullable of this NullableClass.  # noqa: E501
        """
        return self.__set_item('array_items_nullable', value)

    @property
    def object_nullable_prop(self):
        """Gets the object_nullable_prop of this NullableClass.  # noqa: E501

        Returns:
            ({str: (bool, date, datetime, dict, float, int, list, str,)}, none_type): The object_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('object_nullable_prop')

    @object_nullable_prop.setter
    def object_nullable_prop(self, value):
        """Sets the object_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('object_nullable_prop', value)

    @property
    def object_and_items_nullable_prop(self):
        """Gets the object_and_items_nullable_prop of this NullableClass.  # noqa: E501

        Returns:
            ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): The object_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__get_item('object_and_items_nullable_prop')

    @object_and_items_nullable_prop.setter
    def object_and_items_nullable_prop(self, value):
        """Sets the object_and_items_nullable_prop of this NullableClass.  # noqa: E501
        """
        return self.__set_item('object_and_items_nullable_prop', value)

    @property
    def object_items_nullable(self):
        """Gets the object_items_nullable of this NullableClass.  # noqa: E501

        Returns:
            ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The object_items_nullable of this NullableClass.  # noqa: E501
        """
        return self.__get_item('object_items_nullable')

    @object_items_nullable.setter
    def object_items_nullable(self, value):
        """Sets the object_items_nullable of this NullableClass.  # noqa: E501
        """
        return self.__set_item('object_items_nullable', value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NullableClass):
            return False

        if not set(self._data_store.keys()) == set(other._data_store.keys()):
            return False
        for _var_name, this_val in six.iteritems(self._data_store):
            that_val = other._data_store[_var_name]
            types = set()
            types.add(this_val.__class__)
            types.add(that_val.__class__)
            vals_equal = this_val == that_val
            if (not six.PY3 and
                    len(types) == 2 and unicode in types):  # noqa: F821
                vals_equal = (
                    this_val.encode('utf-8') == that_val.encode('utf-8')
                )
            if not vals_equal:
                return False
        return True

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
